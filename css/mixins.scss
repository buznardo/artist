// Font stack
@mixin proxima {
  font-family: "proxima-nova", "Helvetica Neue", arial, sans-serif;
  font-weight:500;
}

@mixin allumi {
  font-family: "allumi-std", "Helvetica Neue", arial, sans-serif;
  font-weight:300;
}

// Responsive breakpoints
@mixin breakpoint($point) {

  @if $point == mini {
    @media (max-width: 679px) { @content; }
  }
  @if $point == small {
    @media (min-width: 680px) { @content; }
  }
  @else if $point == medium {
    @media (min-width: 1120px)  { @content; }
  }
  @else if $point == large {
    @media (min-width: 1820px)  { @content; }
  }
  
}

// Force borders and padding inside elements
@mixin box-sizing {
  -webkit-box-sizing:border-box;
	   -moz-box-sizing: border-box;
	        box-sizing: border-box;
}

// Opacity / Transparency
@mixin opacity($alpha) {
  -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=$alpha*100)";
  filter: alpha(opacity=$alpha*100);
  -webkit-opacity: $alpha;
     -moz-opacity: $alpha;
   -khtml-opacity: $alpha;
          opacity: $alpha;
}

// Quick corners
@mixin corners($value) {
  -webkit-border-radius: $value;
	   -moz-border-radius: $value;
	        border-radius: $value;
	 -khtml-border-radius: $value;
}

// Detailed corners
@mixin corners-detail($topL, $topR, $botR, $botL) {
  -webkit-border-radius: $topL $topR $botR $botL;
	   -moz-border-radius: $topL $topR $botR $botL;
	 border-radius: $topL $topR $botR $botL;
	 -khtml-border-radius: $topL $topR $botR $botL;
}

// Gradient
@mixin gradient($value1, $value2) {
	background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($value1), to($value2));
	background-image: -webkit-linear-gradient(top, $value1, $value2); 
	background-image: -moz-linear-gradient(top, $value1, $value2);
	background-image: -ms-linear-gradient(top, $value1, $value2);
	background-image: -o-linear-gradient(top, $value1, $value2);
}

// Box shadow
@mixin box-shadow($hor, $vert, $blur, $color) {
	-webkit-box-shadow: $hor $vert $blur $color;
	   -moz-box-shadow: $hor $vert $blur $color;
	     -o-box-shadow: $hor $vert $blur $color;
	        box-shadow: $hor $vert $blur $color
}

// Grayscale
@mixin grayscale {
	filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale"); /* Firefox 3.5+ */
	filter: gray; /* IE6-9 */
	-webkit-filter: grayscale(100%); /* Chrome 19+ & Safari 6+ */
}

// Blur
@mixin blur {
	-webkit-filter: blur(2px);
	   -moz-filter: blur(2px);
	     -o-filter: blur(2px);
	    -ms-filter: blur(2px);
	        filter: blur(2px);
	        filter:progid:DXImageTransform.Microsoft.Blur(PixelRadius='2');
}

// Clearfix
@mixin clearfix {
  *zoom: 1;
  
	&:before, &:after {
	  display:table;
	  content: "";
	}
	
	&:after {
	  clear: both;
	}
}

// Transform Scale
@mixin scale($value) {
  -webkit-transform: scale($value);
      -ms-transform: scale($value);
       -o-transform: scale($value);
     -moz-transform: scale($value);
          transform: scale($value);
}

@mixin rotate($value) {
  -webkit-transform: rotate($value);
      -ms-transform: rotate($value);
       -o-transform: rotate($value);
     -moz-transform: rotate($value);
          transform: rotate($value);
}

// CSS Transition
@mixin transition($value) {
  -webkit-transition: all $value;
	   -moz-transition: all $value;
	     -o-transition: all $value;
          transition: all $value;
}